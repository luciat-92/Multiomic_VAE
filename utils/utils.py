from pathlib import Path
import argparse
import torch
import random
import time
from datetime import datetime
import numpy as np

ISO_FORMAT = '%Y-%m-%dT%H:%M:%S.%f'

def safe_create_dir(d: Path):
    """
    Uses new pathlib
    Parameters
    ----------
    d: :obj:`pathlib.Path`
    """
    if not d.exists():
        print('Dir not found creating:', d)
        d.mkdir(parents=True)


def str2path(v):
    """
    Just a wrapper for
    Parameters
    ----------
    v
    Returns
    -------
    """
    try:
        return Path(v)
    except TypeError:
        raise argparse.ArgumentTypeError('Invalid path provided')

#log_f = None
#log_p = None

#def log(*args, **kwargs):
#    ts = datetime.now().strftime(ISO_FORMAT)[:-3]
#    if 'ts' not in kwargs or kwargs['ts'] is not False:
#        args = [ts, *args]
#    if 'ts' in kwargs:
#        del kwargs['ts']
#    print(*args, **kwargs)
#    if log_f:
#        print(*args, **kwargs, file=log_f)
#        log_f.flush()


def timeit(f):
    """Timing decorator for functions. Just add @timeit to start and function
    will be timed. It will write starting and ending times
    Parameters
    ----------
    f : function
        decorator takes the function as parameter
    Returns
    -------
    mixed
        return value of function itself
    Raises
    ------
    Error
        when any error thrown by called function does not catch it
    """

    def wrapper(*args, **kwargs):
        print('Started:', f.__qualname__)
        t = time.time()
        res = f(*args, **kwargs)
        print(f'Finished: {f.__qualname__} elapsed: {time.time() - t:.2f}s')
        return res

    return wrapper


def set_deterministic():
    """
    The function sets the random number generator to be deterministic in order to ensure reproducibility
    of results.
    """
    if torch.cuda.is_available():
        torch.backends.cudnn.benchmark = False
        torch.backends.cudnn.deterministic = True
    torch.set_deterministic(True)


def set_seed(seed):
    """
    The function sets the seed for random number generators in Python, NumPy, and PyTorch to ensure
    reproducibility.
    
    :param seed: The seed parameter is an integer value that is used to initialize the random number
    generator. By setting the seed, you can ensure that the random numbers generated by the code are
    reproducible
    """
    random.seed(seed)
    np.random.seed(seed)
    torch.manual_seed(seed)
    if torch.cuda.device_count() > 0:
        torch.cuda.manual_seed_all(seed)

def dict_to_str(d):
    """
    The function `dict_to_str` takes a dictionary as input and returns a string representation of the
    dictionary, with each key-value pair separated by an underscore.
    
    :param d: A dictionary containing key-value pairs
    :return: a string representation of a dictionary.
    """
    return "_".join(["_".join([k, str(v)]) for k, v in d.items()])